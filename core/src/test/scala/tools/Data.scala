package test.scala.tools

import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.linalg.Vectors

object Data {
  
    def calcula_datos_entrada( sqlContext: org.apache.spark.sql.hive.HiveContext)
      : RDD[LabeledPoint] = {
   sqlContext.createDataFrame(Seq(
(1.0, Vectors.dense(    0.8652863,  1.73472324, 2.61196898, 2.2862033,-1.07150287, 7.32487144 )),
(1.0, Vectors.dense(    0.7515075,  0.94158552,-0.17548133, 4.7106130,-1.07631864,-2.86748436 )),
(1.0, Vectors.dense(    1.3789220, -0.34581290,-0.47652206, 4.6195929,-0.60751062,-1.60555254 )),
(1.0, Vectors.dense(    1.6219938,  1.34690527, 2.91987706, 1.2940924, 0.07250009,-2.53486595 )),
(1.0, Vectors.dense(    1.5506300,  0.36159535, 1.27591763, 0.8131502, 0.98732621, 0.03395256 )),
(1.0, Vectors.dense(    0.5021004,  2.12439235,-0.12971772, 1.3152237, 2.41643484, 4.65498439 )),
(1.0, Vectors.dense(    0.6439939,  0.17226697,-0.31509725, 2.9848058,-0.13856282, 0.59436067 )),
(1.0, Vectors.dense(    0.9599655, -0.78778014, 0.32350202, 3.5587566,-0.91632953, 0.32382101 )),
(1.0, Vectors.dense(    0.5261070,  0.14599000, 1.72316457, 1.7065800, 4.61386056,-2.40938685 )),
(1.0, Vectors.dense(    0.2825298,  0.42797728, 0.35422214, 2.9299874, 3.22235285, 1.17267871 )),
(1.0, Vectors.dense(    1.3539028,  0.17406932, 2.64341921, 0.9531033, 2.55819471, 3.73921624 )),
(1.0, Vectors.dense(    1.0304805,  0.76241591, 1.29864746, 1.8620801, 4.80124998, 6.97996889 )),
(1.0, Vectors.dense(    1.2747662,  0.40467350, 1.23990399, 3.0535887,-1.18629745, 4.47835939 )),
(1.0, Vectors.dense(    0.4619717,  0.58925781, 0.98099229, 7.3039264, 5.58129539,-1.30186541 )),
(1.0, Vectors.dense(    0.8477440,  1.32799144, 0.63554369, 0.9064648, 3.74242406,-0.33115695 )),
(1.0, Vectors.dense(    0.4762017, -0.16364661, 0.79463582,-0.1572651, 1.68652433, 2.60717633 )),
(1.0, Vectors.dense(    0.6290744,  1.76017767, 2.41639121, 1.7721620, 2.39605099, 0.97343291 )),
(1.0, Vectors.dense(    1.1025067,  0.99744416,-0.63964435, 0.2970901, 1.13716364, 1.72845550 )),
(1.0, Vectors.dense(    0.6355241,  0.96177223, 2.33101448, 2.1003427, 0.75218600,-2.47201623 )),
(1.0, Vectors.dense(    0.5557177, -1.03623742, 0.57050133, 1.5910596,-2.52456539,-0.12849196 )),
(0.0, Vectors.dense(   -0.7392406, -4.25322007,-0.59648357,-0.6900998,-3.72822898,-4.45579691 )),
(0.0, Vectors.dense(   -0.7748912, -1.32993049, 1.30207421,-1.4893851,-2.58517764,-4.79459413 )),
(0.0, Vectors.dense(   -1.3323905, -0.54291017, 1.50203011,-2.3290005,-2.67409847,-3.28288105 )),
(0.0, Vectors.dense(   -1.3653188, -2.30410376, 0.62716710,-1.9983614, 0.28814851, 3.50782898 )),
(0.0, Vectors.dense(   -0.1635837, -2.29117344,-1.26903804,-2.5845768,-1.11649794,-2.73464080 )),
(0.0, Vectors.dense(   -1.3699588, -0.09362027,-2.27379276,-0.3592954,-2.40947677,-3.94516735 )),
(0.0, Vectors.dense(   -0.5748284, -3.79596150,-0.76368574,-3.5421039,-3.00874051,-4.71861788 )),
(0.0, Vectors.dense(   -1.1190359, -0.76643943,-1.68002275,-4.0230556, 2.38246845,-1.39856573 )),
(0.0, Vectors.dense(   -1.4915245, -1.26903594,-0.66320632,-2.1559392,-1.52938751,-2.04244431 )),
(0.0, Vectors.dense(   -1.6861229, -1.65854506,-1.67423847, 0.8780263,-3.79240934,-0.33308727 )),
(0.0, Vectors.dense(   -1.5394782, -0.93665421, 0.12830833,-0.7872494,-1.96153011,-1.74797093 )),
(0.0, Vectors.dense(   -1.8720778, -0.94552316, 1.68152500,-1.8560651,-0.79137612, 1.29563272 )),
(0.0, Vectors.dense(   -1.3953547, -0.75299068, 0.18064768, 0.1597608, 0.86273650, 0.90518203 )),
(0.0, Vectors.dense(   -0.5646796, -0.87596445,-0.09146163,-1.6087792,-1.18991479, 1.79409753 )),
(0.0, Vectors.dense(   -1.2598183, -1.53525670,-0.95424774,-1.1991519,-0.74988900,-0.35575410 )),
(0.0, Vectors.dense(   -0.2232940, -0.74151741, 1.67096487,-0.8735829,-3.32424943, 1.94832647 )),
(0.0, Vectors.dense(   -1.0772227,  0.38770887,-1.09747157, 0.8858129, 0.78085555,-1.20253944 )),
(0.0, Vectors.dense(   -1.4194830, -0.33282955, 0.68561028, 1.2387947,-0.77660926, 1.46828768 )),
(0.0, Vectors.dense(   -1.1272742,  0.49704945, 0.92936102, 1.2213747, 0.64789210,-1.41798039 )),
(0.0, Vectors.dense(   -1.2634169, -1.27488040,-0.80357912, 0.6957749, 2.45893182,-2.80310469 ))
    )).toDF("label", "features").rdd.map(row => LabeledPoint(
       row.getAs[Double]("label"),   
       row.getAs[org.apache.spark.mllib.linalg.Vector]("features")
    ))
	/* This datasets implement 20 points for each class. Each one generated for a multivariate normal distribution
	with mean vector (1,1,1,....1) and (-1,-1-,1,...-1). The covariance matrix is diagonal with values
	diag(c(0.2,1, 1.5, 3, 5, 7)), that makes the first variable completely discriminative, the second more or less
	discriminative, and the rest very noisy ones. A feature selection algorithm should detect the features order
	1,2,3,4,5,6.
	*/
  }
}